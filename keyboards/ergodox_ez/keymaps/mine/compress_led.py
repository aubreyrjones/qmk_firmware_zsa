#!/usr/bin/env python3
raw = """
[0] = { {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255}, {139,46,255} },

    [1] = { {0,0,0}, {0,0,255}, {0,0,0}, {0,0,255}, {0,0,0}, {219,255,255}, {219,255,255}, {131,255,255}, {219,255,255}, {0,0,0}, {219,255,255}, {131,255,255}, {131,255,255}, {131,255,255}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {219,255,255}, {219,255,255}, {0,0,0}, {0,0,0}, {0,0,0}, {145,57,250}, {145,57,250}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {74,255,255}, {74,255,255}, {74,255,255}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0} },

    [2] = { {0,0,0}, {0,0,0}, {0,245,245}, {0,245,245}, {0,245,245}, {0,0,0}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,0,0}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,0,0}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,0,0}, {0,0,0} },

    [3] = { {0,0,0}, {30,162,224}, {30,162,224}, {0,0,0}, {0,0,0}, {0,0,0}, {30,162,224}, {30,162,224}, {0,0,0}, {0,0,0}, {30,162,224}, {30,162,224}, {30,162,224}, {0,0,0}, {0,0,0}, {30,162,224}, {0,0,0}, {0,0,0}, {0,0,0}, {30,162,224}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,245,245}, {0,0,0}, {0,0,0} },

"""

raw = raw.replace("{", "(").replace("}", ")")

lines = list(filter(lambda s: len(s) > 0, raw.split("\n")))
lines = [l.split("=")[1].strip() for l in lines]

#print(lines)

lists = [eval(l)[0] for l in lines]

#print(lists[0])

lookup = {}
palette = []
tables = []

for layer in lists:
    lt = []
    for c in layer:
        index = None
        if c in lookup:
            index = lookup[c]
        else:
            index = lookup[c] = len(palette)
            palette.append(c)
        lt.append(index)
    tables.append(lt)

print("const uint8_t PROGMEM ledpal[][3] = {")
print(",\n".join([f"\t{{{','.join(map(str, c))}}}" for c in palette]))
print("};")

print("const uint8_t PROGMEM ledmap[][DRIVER_LED_TOTAL] = {")
for l in tables:
    print("\t{", end='')
    print(", ".join(map(str, l)), end='')
    print("},")
print("};")

print("#define PAL(i) ledpal[ledmap[layer][i]]")

print("""
void set_layer_color(int layer) {
  for (int i = 0; i < DRIVER_LED_TOTAL; i++) {
    HSV hsv = {
      .h = pgm_read_byte(&PAL(i)[0]),
      .s = pgm_read_byte(&PAL(i)[1]),
      .v = pgm_read_byte(&PAL(i)[2]),
    };
    if (!hsv.h && !hsv.s && !hsv.v) {
        rgb_matrix_set_color( i, 0, 0, 0 );
    } else {
        RGB rgb = hsv_to_rgb( hsv );
        float f = (float)rgb_matrix_config.hsv.v / UINT8_MAX;
        rgb_matrix_set_color( i, f * rgb.r, f * rgb.g, f * rgb.b );
    }
  }
}
""")

#print(palette)
#print(tables)